global
    # log /dev/log    local0  #debug, info, notice, without level it logs all
    log /dev/log  local0
    log /dev/log  local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private
    # See: https://ssl-config.mozilla.org/#server=haproxy&version=2.6.5&config=modern&openssl=1.1.1k&guideline=5.6
    # removed 1 cyphersuite from moz site example
    ssl-default-bind-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets
    ssl-default-server-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets
    tune.ssl.default-dh-param 4096
    ssl-dh-param-file /usr/local/etc/haproxy/dhparams.pem
    # tune.ssl.ocsp-update.mindelay
    # tune.ssl.ocsp-update.maxdelay

defaults
    log     global
    option  httplog
#    option  dontlognull
    mode    http
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    option forwarded
    default-server  resolve-prefer ipv4

cache images
    total-max-size 4095   # MB
    max-object-size 10000 # bytes
    max-age 30            # seconds

frontend default
    mode http
    bind *:80
    http-request redirect scheme https code 301 unless { ssl_fc }
    default_backend    nope

frontend tls
    ## HTTPS/TLS
    ########################################################################
    mode http
    option  httpslog
    bind 0.0.0.0:443 ssl crt-list /usr/local/etc/haproxy/crt-list.txt alpn h2,http/1.1 curves secp384r1 strict-sni
    
    # HSTS
    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"

    # (optional) set https header
    # http-request set-header X-Forwarded-Proto https if { ssl_fc }

    ## Caching
    ########################################################################
    # Caching everything in /static/ in a cache named static via a variable that is available in request and response
    http-request set-var(txn.path) path
    acl is_images_path var(txn.path) -m beg /images/
    http-request cache-use images if is_images_path
    http-response cache-store images if is_images_path

    ## Filtering
    ########################################################################

    # stick-table for tracking vars with ip
    stick-table type ip size 500k expire 30s store conn_cur,conn_rate(3s),http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src

    # Client already has 10 opened
    acl too_many_connections_cur    src_conn_cur ge 10
    # Client has opened more than 100 connections in 3 seconds
    acl too_many_connections        sc0_conn_rate gt 100
    # Client has passed the HTTP error rate (10s)
    acl too_many_errors             sc0_http_err_rate() gt 20
    # Client has passed the HTTP request rate (10s)
    acl too_many_requests           sc0_http_req_rate gt 200
    
    # These are often used in attacks so i filter those out ;)
    acl not_allowed_file_extension path_end .php .zip .exe .asp .sql .sh .bin .deb .rpm
    acl not_allowed_path path_sub admin wp-login php sql login? .git script
    #Best would be if u know all routes of all your apps and only allow those paths: acl !allowed_path path_beg / /home /about 

    # Blacklist
    acl is_blocked_ip src -f /usr/local/etc/haproxy/blacklist.ips

    # Geoblocking
    # https://github.com/herrbischoff/country-ip-blocks

    # acl is_CH src -f /usr/local/etc/haproxy/geo/ipv4/ch.cidr
    acl is_CN src -f /usr/local/etc/haproxy/geo/ipv4/cn.cidr
    acl is_US src -f /usr/local/etc/haproxy/geo/ipv4/us.cidr
    acl is_RU src -f /usr/local/etc/haproxy/geo/ipv4/ru.cidr
    acl is_UA src -f /usr/local/etc/haproxy/geo/ipv4/ua.cidr

    # Log if filtered
    http-request set-var(txn.filter) str(TOO_MANY_CONNECTIONS_CUR) if too_many_connections_cur
    http-request set-var(txn.filter) str(TOO_MANY_CONNECTIONS) if too_many_connections
    http-request set-var(txn.filter) str(TOO_MANY_REQUESTS) if too_many_requests
    http-request set-var(txn.filter) str(TOO_MANY_ERRORS) if too_many_errors
    http-request set-var(txn.filter) str(NOT_ALLOWED_FILE_EXTENSION) if not_allowed_file_extension
    http-request set-var(txn.filter) str(NOT_ALLOWED_PATH) if not_allowed_path
    http-request set-var(txn.filter) str(IS_BLOCKED_IP) if is_blocked_ip
    http-request set-var(txn.filter) str(IS_GEO_BLOCKED_IP) if is_CN || is_US || is_RU || is_UA
    http-request capture var(txn.filter) len 26

    # Backends
    use_backend nope if is_blocked_ip
    use_backend nope if is_CN || is_US || is_RU || is_UA
    use_backend slow_down if too_many_connections || too_many_requests || too_many_errors
    use_backend nope if not_allowed_file_extension || not_allowed_path

    ########################################################################

    #automated-frontend-tag

    # LetsEncrypt
    acl is_letsencrypt path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if is_letsencrypt

    default_backend    nope

#automated-backend-tag

backend letsencrypt
    server             127.0.0.1:8443       127.0.0.1:8443

backend slow_down
    timeout tarpit 10s
    http-request tarpit deny_status 429

backend nope
    #http-request deny deny_status 429
    #http-request deny
    http-request reject
    #http-request content reject
    #http-request connection reject
    #http-request silent-drop if TRUE

listen stats
    mode http
    log global
    bind *:7777
    timeout connect    10000
    timeout client     10000
    timeout server     10000
    stats enable
    stats uri /
    stats refresh 10s
    stats show-node
    #TODO: change user/password and or only allow from specific network!
    stats auth user:pw
    stats admin if TRUE
    stats show-desc live master
